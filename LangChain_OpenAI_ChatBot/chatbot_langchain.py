# -*- coding: utf-8 -*-
"""Chatbot_LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14D4UEP3ggHITrLFR0qZOJWVB2pApxbD8

#ChatBot Creation with LangChain
"""

!pip install langchain -qU
!pip install langchain-openai -qU
!pip install langchain-gemini -qU

import os
from google.colab import userdata   #for get the screte key access

"""##Initialize OpenAI LLM"""

from langchain_openai import ChatOpenAI

os.environ["OPENAI_API_KEY"] = userdata.get('OPENAI-API-KEY')

#Initialize the LLM model
llm_openai=ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0)

"""##Initialize Gemini LLM"""

#Initialize Gemini LLM
!pip install langchain-google-genai

os.environ["GOOGLE_API_KEY"] = userdata.get('GEMINI-API_KEY')

from langchain_google_genai import ChatGoogleGenerativeAI

# Change the model name to models/gemini-pro
llm_gemini = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0)

"""##Initialize Prompt Template"""

from langchain_core.prompts import ChatPromptTemplate

#Create prompt template
prompt=ChatPromptTemplate.from_messages(
    [
      {"role":"system", "content":"You are a helpful assistant and inteligent chatbot. Please answer all with correct responses"},  #System instruction message
      {"role":"user", "content":"{question}"}  #Human Message
    ]
)

"""##Initialize Output Parser (String)"""

from langchain_core.output_parsers import StrOutputParser

#Create output parser
output_parser=StrOutputParser()

"""##Create the chain as order"""

chain = prompt | llm_gemini | output_parser

question="What is the capital of India?"
response = chain.invoke({"question":question})
print(response)

"""##Initialize prompt Template for Dynamic Interaction"""

from langchain_core.prompts import MessagesPlaceholder
from langchain_core.messages import SystemMessage,HumanMessage,AIMessage

#Create prompt template
from langchain_core.prompts import ChatPromptTemplate

#Create prompt template
prompt=ChatPromptTemplate.from_messages(
    [
      {"role":"system", "content":"You are a helpful assistant and inteligent chatbot. Please answer all with correct responses"},  #System instruction message
      MessagesPlaceholder(variable_name="question")   #for storing several messages
    ]
)

chain = prompt | llm_gemini | output_parser

question="What is the capital of India?"
response = chain.invoke ({"question":question})
print(response)

"""##Initialize prompt Template with Chat history"""

prompt=ChatPromptTemplate.from_messages(
    [
      {"role":"system", "content":"You are a helpful assistant and inteligent chatbot. Please answer all with correct responses"},  #System instruction message
      HumanMessage(content="Hello I'm Udaya Shantha"),  #This is human entered question
      AIMessage(content="Hello, Udaya Shantha! How can I assist you today?"),  #This is AI generated response
      MessagesPlaceholder(variable_name="question")   #for storing several messages
    ]
)

chain = prompt | llm_gemini | output_parser

question="Who am I?"
response = chain.invoke({"question":question})
print(response)  #Now the history is remembered then answer is correct

#Define History

history=[
    {"role":"human", "content":"Hello I'm Udaya Shantha"},
    {"role":"ai", "content":"Hello, Udaya Shantha! How can I assist you today?"},
    {"role":"human", "content":"What is the largest city in India?"},
    {"role":"ai", "content":"The largest city in India is Mumbai."}
]

#create prompt template with a dynamically adding history

prompt=ChatPromptTemplate.from_messages(
    [
      {"role":"system", "content":"You are a helpful assistant and inteligent chatbot. Please answer all with correct responses"},  #System instruction message
      MessagesPlaceholder(variable_name="history"),  #for dynamically adding history
      MessagesPlaceholder(variable_name="question")   #for storing several messages
    ]
)

chain = prompt | llm_gemini | output_parser

question="Who am I?"
response = chain.invoke ({"question":question})
print(response)  #Now the history is remembered then answer is correct

#Add every message and response to history

history.extend ([HumanMessage(content=question), AIMessage(content=response)])